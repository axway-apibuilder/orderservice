{
	"schemaVersion": "4",
	"info": {
		"name": "Payment Consumer Processor",
		"description": "Payment Consumer Processor"
	},
	"parameter": {
		"properties": {
			"request": {
				"description": "The request"
			},
			"config": {
				"type": "object",
				"description": "The service's configuration"
			},
			"env": {
				"type": "object",
				"description": "The host OS environment"
			}
		},
		"additionalProperties": false
	},
	"start": "orders.2",
	"nodes": {
		"javascript.1": {
			"type": "nodehandler://@axway/api-builder-plugin-fn-javascript/javascript",
			"name": "Execute",
			"method": "Execute",
			"parameters": [
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$",
					"metaName": "Data",
					"metaDescription": "The value to apply as the `data` argument to the JavaScript code. For objects and arrays, `data` is passed by reference."
				},
				{
					"name": "code",
					"type": "string",
					"value": "\"var orderStatus = data.foundByID.status;\\n  var requestStatus = data.request.value.status;\\n  if( orderStatus === \\\"INVENTORYSUCCESS\\\"){\\n \\t data.foundByID.status = requestStatus + orderStatus;\\n  }else{\\n    data.foundByID.status = requestStatus;\\n  }\"",
					"metaName": "Code",
					"metaDescription": "A JavaScript function body. Supports `await` and returning promises."
				}
			],
			"outputs": {
				"next": {
					"context": "$.result",
					"routes": [
						"orders.1"
					],
					"metaName": "Next"
				},
				"error": {
					"context": "$.error",
					"routes": [],
					"metaName": "Error"
				}
			},
			"metaMethod": "Execute"
		},
		"orders.1": {
			"type": "nodehandler://api-builder-flow-invoke/model/mysql/orders",
			"name": "Update",
			"method": "update",
			"parameters": [
				{
					"name": "id",
					"type": "jsonpath",
					"value": "$.request.value.id",
					"metaName": "id"
				},
				{
					"name": "data",
					"type": "jsonpath",
					"value": "$.foundByID",
					"metaName": "data"
				}
			],
			"outputs": {
				"next": {
					"routes": [
						"condition.1"
					],
					"context": "$.updated",
					"metaName": "Next"
				},
				"notfound": {
					"routes": [],
					"metaName": "Not Found"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Update"
		},
		"orders.2": {
			"type": "nodehandler://api-builder-flow-invoke/model/mysql/orders",
			"name": "Find by ID",
			"method": "findByID",
			"parameters": [
				{
					"name": "id",
					"type": "jsonpath",
					"value": "$.request.value.id",
					"metaName": "id"
				}
			],
			"outputs": {
				"next": {
					"routes": [
						"javascript.1"
					],
					"context": "$.foundByID",
					"metaName": "Next"
				},
				"notfound": {
					"routes": [],
					"metaName": "Not Found"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Find by ID"
		},
		"condition.1": {
			"type": "nodehandler://axway-flow/condition",
			"name": "Equals",
			"method": "equals",
			"parameters": [
				{
					"name": "source",
					"type": "jsonpath",
					"value": "$.request.value.status",
					"metaName": "Source",
					"metaDescription": "The input to test."
				},
				{
					"name": "value",
					"type": "string",
					"value": "\"PAYMENTREJECTED\"",
					"metaName": "Value",
					"metaDescription": "The value to test input against."
				}
			],
			"outputs": {
				"true": {
					"routes": [
						"kafka.1"
					],
					"context": "$.equals",
					"metaName": "True"
				},
				"false": {
					"routes": [],
					"context": "$.equals",
					"metaName": "False"
				}
			},
			"metaMethod": "Equals"
		},
		"kafka.1": {
			"type": "nodehandler://@axway/api-builder-plugin-ft-kafka/kafka",
			"name": "Publish JSON",
			"method": "publishJSON",
			"parameters": [
				{
					"name": "message",
					"type": "jsonpath",
					"value": "$.updated",
					"metaName": "Message",
					"metaDescription": "The message to publish."
				},
				{
					"name": "channelId",
					"type": "string",
					"value": "\"kafka-1\"",
					"metaName": "Channel ID",
					"metaDescription": "The Kafka channel ID as configured in triggers/kafka.yml."
				},
				{
					"name": "topic",
					"type": "string",
					"value": "\"order-events\"",
					"metaName": "Topic",
					"metaDescription": "The topic."
				}
			],
			"outputs": {
				"next": {
					"routes": [],
					"metaName": "Next"
				},
				"error": {
					"routes": [],
					"context": "$.error",
					"metaName": "Error"
				}
			},
			"metaMethod": "Publish JSON"
		}
	}
}